// package.json
{
   "name": "inventory-application",
   "version": "1.0.0",
   "description": "",
   "main": "app.js",
   "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1",
      "start": "node app.js",
      "dev": "nodemon app.js"
   },
   "author": "",
   "license": "ISC",
   "dependencies": {
      "body-parser": "^1.20.3",
      "dotenv": "^16.4.5",
      "ejs": "^3.1.10",
      "express": "^4.21.1",
      "method-override": "^3.0.0",
      "pg": "^8.13.1"
   },
   "devDependencies": {
      "nodemon": "^3.1.7"
   }
}

// app.js
const express = require('express');
const methodOverride = require('method-override');
const pool = require('./db/pool');
const categoryRoutes = require('./routes/categoryRoutes');
const manufacturerRoutes = require('./routes/manufacturerRoutes');
const itemRoutes = require('./routes/itemRoutes');
const dashboardRoute = require('./routes/dashboardRoute');

const bodyParser = require('body-parser');
require('dotenv').config();

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(methodOverride('_method'));
app.use(express.static('public'));
app.set('view engine', 'ejs');

app.locals.pool = pool;

// Routes
app.use('/', dashboardRoute);
app.use('/categories', categoryRoutes);
app.use('/manufacturers', manufacturerRoutes);
app.use('/items', itemRoutes);

const PORT = 3000;
app.listen(PORT, () => {
   console.log(`Server running on http://localhost:${PORT}`);
});

// .env
DB_USER=e-lamine
DB_HOST=localhost
DB_NAME=inventory_app
DB_PASSWORD=123
DB_PORT=5432

// views/dashboard.ejs
<!DOCTYPE html>
<html lang="en">
   <head>
      <title>Dashboard</title>
      <!-- <link rel="stylesheet" href="/styles.css" /> -->
      <!-- <script src="/scripts.js"></script> -->
   </head>
   <body>
      <ul>
         <% categories.forEach(category => { %>
         <li><%= category.name %></li>
         <% }); %>
      </ul>
   </body>
</html>

// routes/manufacturerRoutes.js
const express = require('express');
const {
   getManufacturers,
   addManufacturer,
   confirmManufacturerDeletion,
   handleManufacturerDeletion,
   editManufacturer,
   deleteManufacturer,
} = require('../controllers/manufacturerController');

const router = express.Router();

router.get('/', getManufacturers);
router.post('/', addManufacturer);
// router.get('/confirm-deletion/:id', confirmManufacturerDeletion);
// router.post('/handle-deletion', handleManufacturerDeletion);
router.put('/:id', editManufacturer);
router.delete('/:id', deleteManufacturer);

module.exports = router;

// routes/itemRoutes.js
const express = require('express');
const {
   getItems,
   addItem,
   editItem,
   deleteItem,
   addStock,
   removeStock,
} = require('../controllers/itemController');

const router = express.Router();

router.get('/', getItems);
router.post('/', addItem);
router.put('/:id', editItem);
router.delete('/:id', deleteItem);
router.post('/:id/add-stock', addStock);
router.post('/:id/remove-stock', removeStock);

module.exports = router;

// routes/dashboardRoute.js
const express = require('express');
const { getCategories } = require('../controllers/categoryController');
const { getManufacturers } = require('../controllers/manufacturerController');
const { getItems } = require('../controllers/itemController');

const router = express.Router();

router.get('/', getCategories, (req, res) => {
   res.render('dashboard', {
      categories: req.categories,
      //   manufacturers: req.manufacturers,
      //   items: req.items,
      //   selectedItem: null,
   });
});

module.exports = router;

// routes/categoryRoutes.js
const express = require('express');
const {
   getCategories,
   addCategory,
   editCategory,
   deleteCategory,
   confirmCategoryDeletion,
   handleCategoryDeletion,
} = require('../controllers/categoryController');

const router = express.Router();

router.get('/', getCategories);
router.post('/', addCategory);
router.get('/confirm-deletion/:id', confirmCategoryDeletion);
router.post('/handle-deletion', handleCategoryDeletion);
router.put('/:id', editCategory);
router.delete('/:id', deleteCategory);

module.exports = router;

// db/queries.js
const pool = require('./pool');

// Category Queries
exports.getCategories = async () => {
   const res = await pool.query('SELECT * FROM categories');
   return res;
};

exports.createCategory = async (name, slug) => {
   const res = await pool.query(
      'INSERT INTO categories (name, slug) VALUES ($1, $2) RETURNING *',
      [name, slug]
   );
   return res.rows[0];
};

exports.deleteCategory = async (id) => {
   const res = await pool.query(
      'DELETE FROM categories WHERE id = $1 RETURNING *',
      [id]
   );
   return res.rows[0];
};

// Manufacturer Queries
exports.getManufacturers = async () => {
   const res = await pool.query('SELECT * FROM manufacturers');
   return res.rows;
};

exports.createManufacturer = async (name) => {
   const res = await pool.query(
      'INSERT INTO manufacturers (name) VALUES ($1) RETURNING *',
      [name]
   );
   return res.rows[0];
};

// Item Queries
exports.getItems = async () => {
   const res = await pool.query(
      `SELECT items.*, categories.name AS category_name, manufacturers.name AS manufacturer_name 
     FROM items
     LEFT JOIN categories ON items.category_id = categories.id
     LEFT JOIN manufacturers ON items.manufacturer_id = manufacturers.id`
   );
   return res.rows;
};

exports.createItem = async (
   name,
   price,
   specifications,
   categoryId,
   manufacturerId,
   slug
) => {
   const res = await pool.query(
      `INSERT INTO items (name, price, specifications, category_id, manufacturer_id, slug)
     VALUES ($1, $2, $3, $4, $5, $6) RETURNING *`,
      [name, price, specifications, categoryId, manufacturerId, slug]
   );
   return res.rows[0];
};

// db/pool.js
const { Pool } = require('pg');

// require('dotenv').config({
//    path: '../.env',
// });

const pool = new Pool({
   user: 'e-lamine',
   host: 'localhost',
   database: 'inventory_app',
   password: '123',
   port: 5432,
});

module.exports = pool;

// controllers/manufacturerController.js
const { getManufacturers, createManufacturer } = require('../db/queries');

exports.getManufacturers = async (req, res, next) => {
   try {
      const manufacturers = await getManufacturers();
      req.manufacturers = manufacturers.rows;
      next();
   } catch (err) {
      console.error('Error fetching manufacturers:', err.message);
      res.status(500).send('Internal Server Error');
   }
};

const pool = require('../db/pool');

exports.addManufacturer = async (req, res) => {
   try {
      const { name } = req.body;
      await createManufacturer(name);
      res.redirect('/manufacturers');
   } catch (err) {
      console.error('Error adding manufacturer:', err.message);
      res.status(500).send('Internal Server Error');
   }
};

exports.editManufacturer = async (req, res) => {
   const { id } = req.params;
   const { name } = req.body;
   await pool.query('UPDATE manufacturers SET name = $1 WHERE id = $2', [
      name,
      id,
   ]);
   res.redirect('/');
};

exports.deleteManufacturer = async (req, res) => {
   const { id } = req.params;
   await pool.query('DELETE FROM manufacturers WHERE id = $1', [id]);
   res.redirect('/');
};

// controllers/itemController.js
const { getItems, createItem } = require('../db/queries');

exports.getItems = async (req, res, next) => {
   try {
      const items = await getItems();
      req.items = items.rows;
      next();
   } catch (err) {
      console.error('Error fetching items:', err.message);
      res.status(500).send('Internal Server Error');
   }
};

exports.addItem = async (req, res) => {
   try {
      const {
         name,
         price,
         specifications,
         category_id,
         manufacturer_id,
         slug,
      } = req.body;
      await createItem(
         name,
         price,
         specifications,
         category_id,
         manufacturer_id,
         slug
      );
      res.redirect('/items');
   } catch (err) {
      console.error('Error adding item:', err.message);
      res.status(500).send('Internal Server Error');
   }
};

exports.editItem = async (req, res) => {
   const { id } = req.params;
   const { name, price, stock, category_id, manufacturer_id, slug } = req.body;
   await pool.query(
      'UPDATE items SET name = $1, price = $2, stock = $3, category_id = $4, manufacturer_id = $5, slug = $6 WHERE id = $7',
      [name, price, stock, category_id, manufacturer_id, slug, id]
   );
   res.redirect('/');
};

exports.deleteItem = async (req, res) => {
   const { id } = req.params;
   await pool.query('DELETE FROM items WHERE id = $1', [id]);
   res.redirect('/');
};

exports.addStock = async (req, res) => {
   const { id } = req.params;
   const { quantity } = req.body;
   await pool.query('UPDATE items SET stock = stock + $1 WHERE id = $2', [
      quantity,
      id,
   ]);
   res.redirect('/');
};

exports.removeStock = async (req, res) => {
   const { id } = req.params;
   const { quantity } = req.body;
   await pool.query('UPDATE items SET stock = stock - $1 WHERE id = $2', [
      quantity,
      id,
   ]);
   res.redirect('/');
};

// controllers/categoryController.js
const {
   getCategories,
   createCategory,
   deleteCategory,
} = require('../db/queries');

exports.getCategories = async (req, res) => {
   try {
      const categories = await getCategories();
      req.categories = categories.rows;
      next();
   } catch (err) {
      console.error('Error fetching categories:', err.message);
      res.status(500).send('Internal Server Error');
   }
};

exports.addCategory = async (req, res) => {
   const { name, slug } = req.body;
   await createCategory(name, slug);
   res.redirect('/');
};

exports.deleteCategory = async (req, res) => {
   const { id } = req.params;
   await deleteCategory(id);
   res.redirect('/');
};

exports.getCategories = async (req, res, next) => {};

exports.editCategory = async (req, res) => {
   const { id } = req.params;
   const { name, slug } = req.body;
   await pool.query(
      'UPDATE categories SET name = $1, slug = $2 WHERE id = $3',
      [name, slug, id]
   );
   res.redirect('/');
};

const pool = require('../db/pool');

exports.confirmCategoryDeletion = async (req, res) => {
   const { id } = req.params;

   const items = await pool.query(
      'SELECT * FROM items WHERE category_id = $1',
      [id]
   );
   const categories = await pool.query(
      'SELECT * FROM categories WHERE id != $1',
      [id]
   );

   res.render('categories/confirmDeletion', {
      categoryId: id,
      items: items.rows,
      categories: categories.rows,
   });
};

exports.handleCategoryDeletion = async (req, res) => {
   const { action, categoryId, newCategoryId } = req.body;

   if (action === 'delete') {
      await pool.query('DELETE FROM items WHERE category_id = $1', [
         categoryId,
      ]);
   } else if (action === 'reassign' && newCategoryId) {
      await pool.query(
         'UPDATE items SET category_id = $1 WHERE category_id = $2',
         [newCategoryId, categoryId]
      );
   } else if (action === 'nullify') {
      await pool.query(
         'UPDATE items SET category_id = NULL WHERE category_id = $1',
         [categoryId]
      );
   }

   await pool.query('DELETE FROM categories WHERE id = $1', [categoryId]);
   res.redirect('/');
};

